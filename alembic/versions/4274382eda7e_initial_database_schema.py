"""Initial database schema

Revision ID: 4274382eda7e
Revises: 
Create Date: 2025-06-23 12:11:03.051590

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import sqlite

# revision identifiers, used by Alembic.
revision: str = '4274382eda7e'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('system_configs',
    sa.Column('config_key', sa.String(length=100), nullable=False, comment='配置键'),
    sa.Column('config_value', sa.Text(), nullable=True, comment='配置值'),
    sa.Column('config_type', sa.String(length=20), nullable=True, comment='配置类型: string, int, float, bool, json'),
    sa.Column('description', sa.Text(), nullable=True, comment='配置描述'),
    sa.Column('is_public', sa.Boolean(), nullable=True, comment='是否为公开配置'),
    sa.Column('id', sa.Integer(), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True, comment='更新时间'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('system_configs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_system_configs_config_key'), ['config_key'], unique=True)
        batch_op.create_index(batch_op.f('ix_system_configs_id'), ['id'], unique=False)

    op.create_table('users',
    sa.Column('openid', sa.String(length=255), nullable=False, comment='微信OpenID'),
    sa.Column('union_id', sa.String(length=255), nullable=True, comment='微信UnionID'),
    sa.Column('nickname', sa.String(length=100), nullable=True, comment='用户昵称'),
    sa.Column('avatar_url', sa.String(length=500), nullable=True, comment='头像URL'),
    sa.Column('phone', sa.String(length=20), nullable=True, comment='手机号'),
    sa.Column('email', sa.String(length=100), nullable=True, comment='邮箱'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='是否激活'),
    sa.Column('is_premium', sa.Boolean(), nullable=True, comment='是否付费用户'),
    sa.Column('usage_quota', sa.Integer(), nullable=True, comment='每日使用配额'),
    sa.Column('last_login_at', sa.DateTime(timezone=True), nullable=True, comment='最后登录时间'),
    sa.Column('login_count', sa.Integer(), nullable=True, comment='登录次数'),
    sa.Column('id', sa.Integer(), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True, comment='更新时间'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_openid'), ['openid'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_union_id'), ['union_id'], unique=False)

    op.create_table('file_storage',
    sa.Column('user_id', sa.Integer(), nullable=True, comment='用户ID'),
    sa.Column('file_path', sa.String(length=500), nullable=False, comment='文件存储路径'),
    sa.Column('file_name', sa.String(length=255), nullable=False, comment='原始文件名'),
    sa.Column('file_type', sa.String(length=50), nullable=True, comment='文件类型(image, mask, etc)'),
    sa.Column('file_size', sa.Integer(), nullable=True, comment='文件大小(字节)'),
    sa.Column('mime_type', sa.String(length=100), nullable=True, comment='MIME类型'),
    sa.Column('storage_type', sa.String(length=20), nullable=True, comment='存储类型: local, s3, oss'),
    sa.Column('upload_ip', sa.String(length=45), nullable=True, comment='上传IP地址'),
    sa.Column('is_temporary', sa.Boolean(), nullable=True, comment='是否为临时文件'),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True, comment='过期时间'),
    sa.Column('id', sa.Integer(), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True, comment='更新时间'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('file_storage', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_file_storage_file_path'), ['file_path'], unique=False)
        batch_op.create_index(batch_op.f('ix_file_storage_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_file_storage_user_id'), ['user_id'], unique=False)

    op.create_table('process_records',
    sa.Column('user_id', sa.Integer(), nullable=False, comment='用户ID'),
    sa.Column('task_id', sa.String(length=100), nullable=True, comment='任务唯一标识'),
    sa.Column('original_image_url', sa.String(length=500), nullable=False, comment='原始图片URL'),
    sa.Column('original_image_size', sa.Integer(), nullable=True, comment='原始图片大小(字节)'),
    sa.Column('result_image_url', sa.String(length=500), nullable=True, comment='处理结果图片URL'),
    sa.Column('result_image_size', sa.Integer(), nullable=True, comment='结果图片大小(字节)'),
    sa.Column('mask_data', sa.Text(), nullable=True, comment='蒙版数据(base64或路径)'),
    sa.Column('model_name', sa.String(length=50), nullable=False, comment='使用的模型名称'),
    sa.Column('model_config', sqlite.JSON(), nullable=True, comment='模型配置参数'),
    sa.Column('status', sa.String(length=20), nullable=True, comment='处理状态: pending, processing, completed, failed'),
    sa.Column('error_message', sa.Text(), nullable=True, comment='错误信息'),
    sa.Column('progress', sa.Integer(), nullable=True, comment='处理进度(0-100)'),
    sa.Column('processing_time', sa.Integer(), nullable=True, comment='处理时间(秒)'),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True, comment='开始处理时间'),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True, comment='完成时间'),
    sa.Column('id', sa.Integer(), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True, comment='更新时间'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('process_records', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_process_records_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_process_records_task_id'), ['task_id'], unique=True)
        batch_op.create_index(batch_op.f('ix_process_records_user_id'), ['user_id'], unique=False)

    op.create_table('user_sessions',
    sa.Column('user_id', sa.Integer(), nullable=False, comment='用户ID'),
    sa.Column('session_token', sa.String(length=255), nullable=False, comment='会话令牌'),
    sa.Column('device_info', sqlite.JSON(), nullable=True, comment='设备信息'),
    sa.Column('ip_address', sa.String(length=45), nullable=True, comment='IP地址'),
    sa.Column('user_agent', sa.Text(), nullable=True, comment='用户代理字符串'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='是否活跃'),
    sa.Column('last_activity_at', sa.DateTime(timezone=True), nullable=True, comment='最后活跃时间'),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False, comment='过期时间'),
    sa.Column('id', sa.Integer(), nullable=False, comment='主键ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True, comment='创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True, comment='更新时间'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('user_sessions', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_user_sessions_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_sessions_session_token'), ['session_token'], unique=True)
        batch_op.create_index(batch_op.f('ix_user_sessions_user_id'), ['user_id'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user_sessions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_sessions_user_id'))
        batch_op.drop_index(batch_op.f('ix_user_sessions_session_token'))
        batch_op.drop_index(batch_op.f('ix_user_sessions_id'))

    op.drop_table('user_sessions')
    with op.batch_alter_table('process_records', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_process_records_user_id'))
        batch_op.drop_index(batch_op.f('ix_process_records_task_id'))
        batch_op.drop_index(batch_op.f('ix_process_records_id'))

    op.drop_table('process_records')
    with op.batch_alter_table('file_storage', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_file_storage_user_id'))
        batch_op.drop_index(batch_op.f('ix_file_storage_id'))
        batch_op.drop_index(batch_op.f('ix_file_storage_file_path'))

    op.drop_table('file_storage')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_union_id'))
        batch_op.drop_index(batch_op.f('ix_users_openid'))
        batch_op.drop_index(batch_op.f('ix_users_id'))

    op.drop_table('users')
    with op.batch_alter_table('system_configs', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_system_configs_id'))
        batch_op.drop_index(batch_op.f('ix_system_configs_config_key'))

    op.drop_table('system_configs')
    # ### end Alembic commands ###
